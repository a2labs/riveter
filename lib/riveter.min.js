/**
 * riveter - Mix-in, inheritance and constructor extend behavior for your JavaScript enjoyment.
 * Â© 2012 - Copyright appendTo, LLC 
 * Author(s): Jim Cowart, Nicholas Cloud, Doug Neiner
 * Version: v0.1.1
 * Url: https://github.com/a2labs/riveter
 * License(s): MIT, GPL
 */
(function(t,n){"object"==typeof module&&module.exports?module.exports=n(require("underscore")):"function"==typeof define&&define.amd?define(["underscore"],function(e){return n(e,t)}):t.riveter=n(t._,t)})(this,function(t){var n=Array.prototype.slice,e=function(){for(var t=n.call(arguments,0);t.length;)e.rivet(t.shift())};return e.rivet=function(t){t.hasOwnProperty("extend")||(t.extend=function(n,r){return e.extend(t,n,r)}),t.hasOwnProperty("compose")||(t.compose=function(){return e.compose.apply(this,[t].concat(n.call(arguments,0)))}),t.hasOwnProperty("inherits")||(t.inherits=function(n,r){e.inherits(t,n,r)}),t.hasOwnProperty("mixin")||(t.mixin=function(){e.mixin.apply(this,[t].concat(n.call(arguments,0)))})},e.inherits=function(n,r,o){var i,p=function(){},s=function(){r.apply(this,arguments)};return"object"==typeof n?(n.hasOwnProperty("constructor")&&(s=n.constructor),i=n):(s=n,i=n.prototype),e.rivet(s),t.defaults(s,r,o),p.prototype=r.prototype,s.prototype=new p,t.extend(s.prototype,i,{constructor:s}),s.__super=r,s.__super__=r.prototype,s},e.extend=function(t,n,r){return e.inherits(n,t,r)},e.compose=function(){var r=n.call(arguments,0),o=r.shift();e.rivet(o);var i=t.reduce(r,function(t,n){return n.hasOwnProperty("_preInit")&&t.preInit.push(n._preInit),n.hasOwnProperty("_postInit")&&t.postInit.push(n._postInit),n=n.mixin||n,t.items.push(n),t},{items:[],preInit:[],postInit:[]}),p=o.extend({constructor:function(){var e=n.call(arguments,0);t.each(i.preInit,function(t){t.apply(this,e)},this),o.prototype.constructor.apply(this,e),t.each(i.postInit,function(t){t.apply(this,e)},this)}});return e.rivet(p),t.defaults(p.prototype,t.extend.apply(null,[{}].concat(i.items))),p},e.mixin=function(){var r=n.call(arguments,0),o=r.shift();e.rivet(o),t.defaults(o.prototype,t.extend.apply(null,[{}].concat(r)))},e});